@page "/admin"
@attribute [Authorize(Roles = "Admin")]
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization;
@using TicketHive.Bll.Services.Interfaces;
@using TicketHive.Bll.Services.Managers;
@inject IUnitOfService unitOfService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider _provider;
@inject IJSRuntime jsRuntime;


<h2>Admin</h2>


<button type="button" class="btn btn-success btn-lg mx-auto" data-toggle="modal" data-target="#myModal">
    Add Event
</button>


<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel"></h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <div class="container" style="color: #305076;">
                    <h2 class="mb-4">Add new event</h2>
                    <div class="card mb-4">
                        <div class="card-body">
                            <EditForm Model="_newEvent" OnValidSubmit="AddEvent" OnInvalidSubmit="HandleInvalidSubmit">
                                <DataAnnotationsValidator/>
                                <div class="form-group"> 
                                    <label for="event-name">Event Name</label>
                                    <InputText class="form-control" id="event-name" @bind-Value="_eventName"/>
                                </div>
                                <div class="form-group">
                                    <label for="event-type">Event Type</label>
                                    <InputSelect class="form-control" id="event-type" @bind-Value="_eventTypeName">
                                        @if (_allEventTypes is not null)
                                        {
                                            foreach (var e in _allEventTypes)
                                            {
                                                <option>@e.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="form-group">
                                    <label for="event-desc">Event Description</label>
                                    <InputText class="form-control" id="event-date" @bind-Value="_eventDescription">
                                    </InputText>
                                </div>


                                <div class="form-group">
                                    <label for="event-date">Start date</label>
                                    <InputDate class="form-control" @bind-Value="_startTime" format="dd/MM/yyyy"></InputDate>
                                </div>

                                <div class="form-group">
                                    <label for="event-endDate">End date</label>
                                    <InputDate class="form-control" @bind-Value="_endTime" format="dd/MM/yyyy"></InputDate>
                                </div>



                                    <div class="form-group">
                                    <label for="event-country">Country</label>
                                    <InputSelect class="form-control" id="event-country" @bind-Value="_countryName">
                                        @if (_allEventTypes is not null)
                                        {
                                            foreach (var e in _allCountries)
                                            {
                                                <option>@e.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                  </div>

                                <div class="form-group">
                                    <label for="event-price">Event Price</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">$</span>
                                        </div>
                                        <input type="text" class="form-control" id="event-price" placeholder="0.00" @bind="_eventPrice">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="event-capacity">Event Capacity</label>
                                    <input type="number" class="form-control" id="event-capacity" step="10.00" @bind="_eventCapacity">
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" @onclick="AddEvent">Add Event</button>
            </div>
        </div>
    </div>
</div>


<div class="container" style="background-color: #fbe89c;">
    <div class="row row-cols-5">
        @if (_allEvents is not null)
        {
            @foreach (var e in _allEvents)
            {

                <div class="col mb-4" style="color: #305076">
                    <div class="card h-100">
                        <img src="/images/@e.ImageString" alt="Event image" class="img-fluid rounded">
                        <div class="card-body">
                            <h5 class="card-title red-foreground">@e.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@e.EventType.Name</h6>
                            <p class="card-text blue-foreground">@e.StartTime - @e.EndTime</p>
                            <p class="card-text font-weight-bold">$@e.Price</p>
                        </div>
                        <div class="card-footer mt-auto">
                            <button type="button" class="btn btn-danger" @onclick="(() => DeleteEvent(e.Id))">Delete</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">Something Went Wrong</h5>
                        <p class="card-text">Unable to load event information</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>




@code {
    private IEnumerable<EventTypeViewModel>? _allEventTypes = new List<EventTypeViewModel>();
    private IEnumerable<EventViewModel>? _allEvents = new List<EventViewModel>();
    private IEnumerable<CountryViewModel>? _allCountries = new List<CountryViewModel>();
    private EventViewModel _newEvent = new EventViewModel();
    private string _eventName = string.Empty;
    private string _eventTypeName = string.Empty;
    private string _eventDescription = string.Empty;
    private DateTime _startTime;
    private DateTime _endTime;
    private string _countryName = string.Empty;
    private decimal _eventPrice;
    private int _eventCapacity;
    private bool _isAdmin;


    protected override async Task OnInitializedAsync()
    {
        var authState = await _provider.GetAuthenticationStateAsync();
        var name = authState.User.Identity.Name;
        _isAdmin = authState.User.IsInRole("Admin");

        _allCountries = await unitOfService.CountryService.GetAllAsync();
        _allEventTypes = await unitOfService.EventTypeService.GetAllAsync();


        // set default values for country and event type to the first items in the lists
        _countryName = _allCountries.FirstOrDefault()?.Name ?? string.Empty;
        _eventTypeName = _allEventTypes.FirstOrDefault()?.Name ?? string.Empty;
        await GetAllEvents();


        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {

    }

    private async Task GetAllEvents()
    {
        _allEvents = await unitOfService.EventService.GetAllAsync();
    }
    private async Task DeleteEvent(int id)
    {
        await HandleButtonClick(id);
        await GetAllEvents();
        StateHasChanged();
        await OnInitializedAsync();
    }

    private async Task AddEvent()
    {
        var newEventViewModel = new EventViewModel
            {
                Name = _eventName,
                EventTypeName = _eventTypeName,
                Description = _eventDescription,
                MaxUsers = _eventCapacity,
                StartTime = _startTime,
                EndTime = _endTime,
                CountryName = _countryName,
                Price = _eventPrice,
                ImageString = $"MicrosoftTeams-image ({new Random().Next(1, 25)}).png"
            };


        //var country = _allCountries.FirstOrDefault(c => c.Name.Equals(newEventViewModel.CountryName));      //  might be the root of the problems here since its the only synchrone method i can find that can cause the errors on this page
        //var eventType = _allEventTypes.FirstOrDefault(et => et.Name.Equals(newEventViewModel.EventTypeName));
        
        var country = await Task.FromResult(_allCountries.FirstOrDefault(c => c.Name.Equals(newEventViewModel.CountryName)));   // Hopefully this will solve all problems
        var eventType = await Task.FromResult(_allEventTypes.FirstOrDefault(et => et.Name.Equals(newEventViewModel.EventTypeName)));


        if (country is not null && eventType is not null)
        {   // extra check for ensuring that the country & eventtype is set before calling the api

            newEventViewModel.Country = country;
            newEventViewModel.EventType = eventType;

            await unitOfService.EventService.AddAsync(newEventViewModel);   // add the event
            //await AddTickets(newEventViewModel);


            // define a task for adding tickets and set it to null
            Task? addTicketsTask = null;
            // Create tickets for each user
            for (int i = 1; i <= newEventViewModel.MaxUsers; i++)
            {
                var ticket = new TicketViewModel
                        {
                            EventId = newEventViewModel.Id,
                            Event = newEventViewModel,
                            Price = newEventViewModel.Price,
                            StartTime = newEventViewModel.StartTime,
                            EndTime = newEventViewModel.EndTime
                        };

                addTicketsTask = unitOfService.TicketService.AddAsync(ticket);
            }
            // wait for the completion of the task
            if (addTicketsTask != null)
            {
                await addTicketsTask;  // if the task is still set to null call the task and wait for it again
            }

            // call the get all events to refresh
            await GetAllEvents();   
            await OnInitializedAsync();
        }

    }

    //private async Task AddTickets(EventViewModel eventForTickets)   // Caused 400 bad request
    //{

    //    // Create tickets for each user
    //    for (int i = 1; i <= eventForTickets.MaxUsers; i++)
    //    {
    //        var ticket = new TicketViewModel
    //            {
    //                EventId = eventForTickets.Id,
    //                Event = eventForTickets,
    //                Price = eventForTickets.Price,
    //                StartTime = eventForTickets.StartTime,
    //                EndTime = eventForTickets.EndTime
    //            };

    //        await unitOfService.TicketService.AddAsync(ticket);
    //    }
    //}

    private async Task HandleButtonClick(int id)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to proceed?");

        if (confirmed)
        {
            unitOfService.EventService.Remove(id);
        }
        else
        {
           
        }
    }
}
