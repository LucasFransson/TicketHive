@page "/admin"
@attribute [Authorize(Roles = "Admin")]
@using System.ComponentModel;
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Authorization;
@using TicketHive.Bll.Services.Interfaces;
@using TicketHive.Bll.Services.Managers;
@inject IUnitOfService unitOfService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider _provider;
@inject IJSRuntime jsRuntime;


<h2>Admin</h2>


<button type="button" class="btn btn-success btn-lg mx-auto" data-toggle="modal" data-target="#myModal">
    Add Event
</button>


<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel"></h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container" style="color: #305076;">
                    <h2 class="mb-4">Add new event</h2>
                    <div class="card mb-4">
                        <div class="card-body">
                            <EditForm Model="newEvent" OnValidSubmit="AddEvent" OnInvalidSubmit="HandleInvalidSubmit">
                                <DataAnnotationsValidator/>
                                <div class="form-group"> 
                                    <label for="event-name">Event Name</label>
                                    <InputText class="form-control" id="event-name" @bind-Value="newEvent.Name"/>
                                </div>
                                <div class="form-group">
                                    <label for="event-type">Event Type</label>
                                    <InputSelect class="form-control" id="event-type" @bind-Value="newEvent.EventTypeName">
                                        @if (_allEventTypes is not null)
                                        {
                                            foreach (var e in _allEventTypes)
                                            {
                                                <option>@e.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="form-group">
                                    <label for="event-desc">Event Description</label>
                                    <InputText class="form-control" id="event-date" @bind-Value="newEvent.Description">
                                    </InputText>
                                </div>


                                <div class="form-group">
                                    <label for="event-Date">Start date</label>
                                    <InputDate class="form-control" id="event-date" @bind-Value="newEvent.StartTime" format="dd/MM/yyyy">
                                    </InputDate>
                                </div>


                                <div class="form-group">
                                    <label for="event-endDate">End date</label>
                                    <InputDate class="form-control" id="event-date" @bind-Value="newEvent.EndTime" format="dd/MM/yyyy">
                                    </InputDate>
                                </div>



                                    <div class="form-group">
                                    <label for="event-country">Country</label>
                                    <InputSelect class="form-control" id="event-country" @bind-Value="newEvent.CountryName">
                                        @if (_allEventTypes is not null)
                                        {
                                            foreach (var e in _allCountries)
                                            {
                                                <option>@e.Name</option>
                                            }
                                        }
                                    </InputSelect>
                                  </div>

                                <div class="form-group">
                                    <label for="event-price">Event Price</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">$</span>
                                        </div>
                                        <input type="text" class="form-control" id="event-price" placeholder="0.00" @bind="newEvent.Price">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="event-capacity">Event Capacity</label>
                                    <input type="number" class="form-control" id="event-capacity" step="10.00" @bind="newEvent.MaxUsers">
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success" @onclick="AddEvent">Add Event</button>
            </div>
        </div>
    </div>
</div>


<div class="container" style="background-color: #fbe89c;">
    <div class="row row-cols-5">
        @if (_allEvents is not null)
        {
            @foreach (var e in _allEvents)
            {

                <div class="col mb-4" style="color: #305076">
                    <div class="card h-100">
                        <img src="@e.ImageString" class="card-img-top" alt="Event Image" />
                        <div class="card-body">
                            <h5 class="card-title red-foreground">@e.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@e.EventType.Name</h6>
                            <p class="card-text blue-foreground">@e.StartTime - @e.EndTime</p>
                            <p class="card-text font-weight-bold">$@e.Price</p>
                        </div>
                        <div class="card-footer mt-auto">
                            <button type="button" class="btn btn-danger" @onclick="(() => DeleteEvent(e.Id))">Delete</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">Something Went Wrong</h5>
                        <p class="card-text">Unable to load event information</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>




@code {
    private IEnumerable<EventTypeViewModel>? _allEventTypes = new List<EventTypeViewModel>();
    private IEnumerable<EventViewModel>? _allEvents = new List<EventViewModel>();
    private IEnumerable<CountryViewModel>? _allCountries = new List<CountryViewModel>();
    EventViewModel newEvent = new();
    private bool isAdmin;


    protected override async Task OnInitializedAsync()
    {
        var authState = await _provider.GetAuthenticationStateAsync();

        var name = authState.User.Identity.Name;

        isAdmin = authState.User.IsInRole("Admin");

        await GetAllEvents();
        await GetAllEventTypes();
        await GetAllCountries();

        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {

    }

    private async Task GetAllCountries()
    {
        _allCountries = await unitOfService.CountryService.GetAllAsync();
    }

    private async Task GetAllEventTypes()
    {
        _allEventTypes = await unitOfService.EventTypeService.GetAllAsync();
    }
    private async Task GetAllEvents()
    {
        _allEvents = await unitOfService.EventService.GetAllAsync();
    }
    private async Task DeleteEvent(int id)
    {
        await HandleButtonClick(id);
        await GetAllEvents();
        StateHasChanged();
        OnInitializedAsync();
    }
    private async Task AddEvent()
    {
        newEvent.ImageString = $"MicrosoftTeams-image ({new Random().Next(1, 25)}).png";

        newEvent.Country = _allCountries.FirstOrDefault(c => c.Name.Equals(newEvent.CountryName))!;
        newEvent.EventType = _allEventTypes.FirstOrDefault(et => et.Name.Equals(newEvent.EventTypeName))!;


        await unitOfService.EventService.AddAsync(newEvent);

    }

    private async Task HandleButtonClick(int id)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to proceed?");

        if (confirmed)
        {
            unitOfService.EventService.Remove(id);
        }
        else
        {
           
        }
    }
}
