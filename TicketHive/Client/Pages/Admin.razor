@page "/admin"
@using TicketHive.Bll.Services.Interfaces;
@inject IUnitOfService unitOfService;
@inject NavigationManager NavigationManager;


<h3>Admin</h3>


<div class="container">
    <h2 class="mb-4">Add new event</h2>
    <div class="card mb-4">
        <div class="card-body">
            <form>
                <div class="form-group">
                    <label for="event-name">Event Name</label>
                    <input type="text" class="form-control" id="event-name">
                </div>
                <div class="form-group">
                    <label for="event-type">Event Type</label>
                    <select class="form-control" id="event-type">
                        @if(_allEventTypes is not null)
                        {
                            foreach(var e in _allEventTypes)
                            {
                                <option>@e.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="event-date">Event Date</label>
                    <input type="date" class="form-control" id="event-date">
                </div>
                <div class="form-group">
                    <label for="event-time">Event Time</label>
                    <input type="time" class="form-control" id="event-time">
                </div>
                <div class="form-group">
                    <label for="event-place">Event Place</label>
                    <input type="text" class="form-control" id="event-place">
                </div>
                <div class="form-group">
                    <label for="event-price">Event Price</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">$</span>
                        </div>
                        <input type="text" class="form-control" id="event-price" placeholder="0.00">
                    </div>
                </div>
                <div class="form-group">
                    <label for="event-capacity">Event Capacity</label>
                    <input type="number" class="form-control" id="event-capacity" step="10.00">
                </div>
                <button type="submit" class="btn btn-primary">Add Event</button>
            </form>
        </div>
    </div>
</div>


<div class="container">
			<div class="row">
				<div class="card-group mx-auto">
					@if (_allEvents is not null)
					{
						foreach (var e in _allEvents)
						{
					<div class="card mr-5">
						<div class="card-body">
							<h5 class="card-title red-foreground">@e.Name</h5>
							<h6 class="card-subtitle mb-2 text-muted">@e.EventType.Name</h6>
							<p class="card-text blue-foreground">@e.StartTime - @e.EndTime</p>
							<p class="card-text font-weight-bold">$@e.Price</p>
                            <button type="button" value="Delete" @onclick="DeleteEvent"></button>
						</div>
					</div>
				}
			}
			else
			{
				<div class="card mr-5">
					<div class="card-body">
						<h5 class="card-title">Something Went Wrong</h5>
						<p class="card-text">Unable to load event information</p>
						</div>
					</div>

			}

            </div>
    </div>
</div>



@code {
    private IEnumerable<EventTypeViewModel> _allEventTypes = new List<EventTypeViewModel>();
    private IEnumerable<EventViewModel> _allEvents = new List<EventViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await GetAllEventTypes();
        await GetAllEvents();
    }


    private async Task GetAllEventTypes()
    {
        _allEventTypes = await unitOfService.EventTypeService.GetAllAsync();
    }
    private async Task GetAllEvents()
    {
        _allEvents = await unitOfService.EventService.GetAllAsync();
    }
    private void DeleteEvent()
    {
        //unitOfService.EventService.Remove(Id);
    }

}
