@inject AuthenticationStateProvider provider;
@inject NavigationManager NavigationManager;
@inject IUnitOfService unitOfService;



@page "/Booking"
@using TicketHive.Bll.Services.Interfaces;
@using TicketHive.Bll.Services.Managers;

<h1>Events</h1>
<div class="container">
			<div class="row">
				<div class="card-group mx-auto">
					@if (_allEvents is not null)
@foreach (var e in _allEvents)
{
    <div class="card mr-5">
                        <img src=@e.ImageString
                             class="card-img-top"
                             alt="Event Image" />
        <div class="card-body">
            <h5 class="card-title red-foreground">@e.Name</h5>
            <h6 class="card-subtitle mb-2 text-muted">@e.EventType.Name</h6>
            <p class="card-text blue-foreground">@e.Description</p>
            <p class="card-text blue-foreground">@DateTimeFormatter.FormatDayNumberMonthText(e.StartTime) - @DateTimeFormatter.FormatDayNumberMonthText(e.EndTime)</p>
            <p class="card-text blue-foreground">@e.CountryName</p>
            <p class="card-text font-weight-bold">$@e.Price</p>
            <a href="#" class="btn btn-buy btn-block">Buy Tickets</a>
        </div>
    </div>
}
        </div>
    </div>
</div>
<SearchbarButton />
<div class="container">
    <select class="form-select form-select-sm w-50 p-3" aria-label=".form-select-sm example">
        <option selected>Sort by:</option>
        <option value="1" @onchange="SortByDate">Date</option>
        <option value="1" @onchange="SortByName">Name</option>
        <option value="2" @onchange="SortPriceLowToHigh">Price: Low to high</option>
        <option value="3" @onchange="SortPriceHighToLow">Price: High to low</option>
    </select>
    <table class="table">
        <thead>

            <tr>
                <th scope="col"> </th>
                <th scope="col">Event</th>
                <th scope="col">City</th>
                <th scope="col"> </th>
                <th scope="col">
                </th>
            </tr>
           
        </thead>
        <tbody>  
            @foreach(var e in _filteredEvents){
            <tr>
                <th scope="row"> </th>
                <td>@e.Name</td>
                <td>@e.CountryName</td>
                <td>@DateTimeFormatter.FormatMonthNameYear(e.StartTime)</td>
                <td>@e.Price</td>
                <td><button class="button-buy">Buy Ticket</button></td>
            </tr> }
           @* <tr>
                <th scope="row"> </th>
                <td>Abba</td>
                <td>Karlshamn</td>
                <td><button class="button-buy">Buy Ticket</button></td>
            </tr>
            <tr>
                <th scope="row"></th>
                <td>Nordman</td>
                <td>Malmö</td>
                <td><button class="button-buy">Buy Ticket</button></td>
            </tr>*@
        </tbody>
    </table>
</div>





@code {
    ViewModelManager viewManager = new();

    private IEnumerable<EventViewModel> _usersEvents = new List<EventViewModel>();
    private IEnumerable<EventViewModel> _allEvents = new List<EventViewModel>();
    private IEnumerable<EventViewModel> _filteredEvents = new List<EventViewModel>();
    
    protected override async Task OnInitializedAsync()
    {
        await GetAllEvents();
        StateHasChanged();
    }

    private async Task GetAllEvents()
    {
        _allEvents = await unitOfService.EventService.GetAllAsync();
    }
    private async Task SortByDate()
    {
        _filteredEvents = await viewManager.SortEventsByDateAsync(_allEvents);
        StateHasChanged();
    }

    private async Task SortPriceLowToHigh()
    {
        _filteredEvents = await viewManager.SortEventsByPriceAsync(_allEvents);
        StateHasChanged();
    }

    private async Task SortPriceHighToLow()
    {
        _filteredEvents = (await viewManager.SortEventsByPriceAsync(_allEvents)).Reverse();
        StateHasChanged();
    }
    private async Task SortByName()
    {
        _filteredEvents = await viewManager.SortEventsByNameAsync(_allEvents);
    }
}
