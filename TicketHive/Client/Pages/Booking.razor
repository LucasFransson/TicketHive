@inject AuthenticationStateProvider provider;
@inject NavigationManager NavigationManager;
@inject IUnitOfService unitOfService;



@page "/Booking"
@using TicketHive.Bll.Services.Interfaces;
@using TicketHive.Bll.Services.Managers;
@using TicketHive.Shared.Extensions;




<h1>Events</h1>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 col-md-10 col-lg-8">
            <form class="card card-sm">
                <div class="card-body row no-gutters align-items-center">
                    <div class="col-auto">
                        <i class="fas fa-search h4 text-body"></i>
                    </div>
                    <div class="col">
                        <input class="form-control form-control-lg form-control-borderless" type="search" placeholder="Search events..." @bind-value="@_searchTerm" @oninput="@HandleSearch">
                    </div>
@*                    <div class="col-auto">
                        <button class="btn btn-lg btn-success" type="submit" @onclick="@HandleSearch">Search</button>
                    </div>*@
                </div>
            </form>
        </div>
    </div>
</div>

<div class="container">
    <select class="form-select form-select-sm w-50 p-3" aria-label=".form-select-sm example" @onchange="@(async (e) => await HandleSortChanged(e))">
        <option selected>@_selectedSortMethod</option>
        <option>Date</option>
        <option>Name</option>
        <option>Price: Low to high</option>
        <option>Price: High to low</option>
    </select>

    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
        @if (_filteredEvents is not null)
        {
            @foreach (var e in _filteredEvents)
            {
                <div class="col mb-4">
                    <div class="card">
                        <img src="@e.ImageString" class="card-img-top" alt="Event Image" />
                        <div class="card-body">
                            <h5 class="card-title red-foreground">@e.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@e.EventType.Name</h6>
                            <p class="card-text blue-foreground">@e.Description</p>
                            <p class="card-text blue-foreground">@DateTimeFormatter.FormatDayNumberMonthText(e.StartTime) - @DateTimeFormatter.FormatDayNumberMonthText(e.EndTime)</p>
                            <p class="card-text blue-foreground">@e.CountryName</p>
                            <p class="card-text font-weight-bold">$@e.Price</p>
                            <button class="btn btn-buy btn-block" @onclick="(()=>GoToEvent(e.Id))">Buy Tickets</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No events to display.</p>
        }
    </div>
</div>


@code {
    ViewModelManager viewManager = new();


    private List<EventViewModel> _allEvents = new List<EventViewModel>();
    private IEnumerable<EventViewModel> _filteredEvents = new List<EventViewModel>();
    private string _selectedSortMethod = "Sort by:";
    private string _searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await GetAllEvents();
        _filteredEvents = _allEvents;
        await HandleSortChanged(new ChangeEventArgs { Value = _selectedSortMethod });
        StateHasChanged();
    }

    private async Task GetAllEvents()
    {
        _allEvents = (await unitOfService.EventService.GetAllAsync()).ToList();
    }

    private async Task HandleSortChanged(ChangeEventArgs e)
    {
        _selectedSortMethod = e.Value.ToString();

        switch (_selectedSortMethod)
        {
            case "Sort by:":
                _filteredEvents = _allEvents;
                break;

            case "Date":
                _filteredEvents = await viewManager.SortEventsByDateAsync(_allEvents);
                break;

            case "Name":
                _filteredEvents = await viewManager.SortEventsByNameAsync(_allEvents);
                break;

            case "Price: Low to high":
                _filteredEvents = await viewManager.SortEventsByPriceAsync(_allEvents);
                break;

            case "Price: High to low":
                _filteredEvents = (await viewManager.SortEventsByPriceAsync(_allEvents)).Reverse();
                break;

            default:
                _filteredEvents = _allEvents;
                break;
        }

        StateHasChanged();
    }
    private void HandleSearch()
    {
        Console.WriteLine(_searchTerm);  // for debugging purposes
        if (!string.IsNullOrEmpty(_searchTerm))
        {
            //_filteredEvents = _allEvents.Where(e => e.Name.ToLower().Contains(_searchTerm.ToLower())).ToList();
            _filteredEvents = _allEvents.Where(e => e.Name.ToLower()==_searchTerm.ToLower()).ToList();
        }
        else
        {
            _filteredEvents = _allEvents;
        }

        StateHasChanged();
    }
    private void GoToEvent(int id)
    {
        NavigationManager.NavigateTo($"/event/{id}");
    }
  
}
