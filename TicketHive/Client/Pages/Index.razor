@using TicketHive.Bll.Services;
@using TicketHive.Bll.Services.Interfaces;
@using TicketHive.Bll.Services.Implementations;
@using TicketHive.Bll.Services.Managers;
@using TicketHive.Shared.ViewModels;
@page "/"
@inject AuthenticationStateProvider provider;
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager;
@inject IUnitOfService unitOfService;


<PageTitle>Index</PageTitle>


<div class="container">
			<div id="carouselExampleIndicators"
				class="carousel slide"
				data-ride="carousel"
			>
				<ol class="carousel-indicators">
					<li
						data-target="#carouselExampleIndicators"
						data-slide-to="0"
						class="active"
					></li>
					<li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
					<li data-target="#carouselExampleIndicators" data-slide-to="2"></li>
				</ol>
				<div class="carousel-inner">
					<div class="carousel-item active">
						<img src="/images/MicrosoftTeams-image (1).png"
							class="d-block w-100"
							alt="First Slide"
						/>
						<div class="carousel-caption d-none d-md-block">
							<h5 class="card-title">Event Name</h5>
							<p class="card-text">Event Start Time - Event End Time</p>
							<a href="#" class="btn btn-buy btn-block">Buy Tickets</a>
						</div>
					</div>
					<div class="carousel-item">
						<img src="/images/MicrosoftTeams-image (2).png"
							class="d-block w-100"
							alt="Second Slide"
						/>
						<div class="carousel-caption d-none d-md-block">
							<h5 class="card-title">Event Name</h5>
							<p class="card-text">Event Start Time - Event End Time</p>
							<a href="#" class="btn btn-buy btn-block">Buy Tickets</a>
						</div>
					</div>
					<div class="carousel-item">
						<img src="/images/MicrosoftTeams-image (11).png"
							class="d-block w-100"
							alt="Third Slide"
						/>
						<div class="carousel-caption d-none d-md-block">
							<h5 class="card-title">Event Name</h5>
							<p class="card-text">Event Start Time - Event End Time</p>
							<a href="#" class="btn btn-buy btn-block">Buy Tickets</a>
						</div>
					</div>
				</div>
		<a id="carouselExampleIndicators-prev"
					class="carousel-control-prev"		
					role="button"
					data-slide="prev"
				>
					<span class="carousel-control-prev-icon" aria-hidden="true"></span>
					<span class="sr-only">Previous</span>
				</a>
		<a id="carouselExampleIndicators-next"
					class="carousel-control-next"
					role="button"
					data-slide="next"
				>
					<span class="carousel-control-next-icon" aria-hidden="true"></span>
					<span class="sr-only">Next</span>
				</a>
			</div>
		</div>

<SearchbarButton />

		<div class="container">
			<div class="row">
				<div class="card-group mx-auto">
					@if (_allEvents is not null)
			{
				int picCounter = 1;
				foreach (var e in _allEvents)
						{
					<div class="card mr-5">
						<img src="/images/MicrosoftTeams-image (@picCounter).png"
							 class="card-img-top"
							 alt="Event Image" />
						<div class="card-body"> 
							<h5 class="card-title red-foreground">@e.Name</h5>
							<h6 class="card-subtitle mb-2 text-muted">@e.EventType.Name</h6>
							<p class="card-text blue-foreground">@e.Description</p>
							<p class="card-text blue-foreground">@e.StartTime - @e.EndTime</p>
							<p class="card-text blue-foreground">@e.CountryName</p>
							<p class="card-text font-weight-bold">$@e.Price</p>
							<a href="#" class="btn btn-buy btn-block">Buy Tickets</a>
						</div>
					</div>
					picCounter++;
				}
			}
			else
			{
				<div class="card mr-5">
					<div class="card-body">
						<h5 class="card-title">Something Went Wrong</h5>
						<p class="card-text">Unable to load event information</p>
						</div>
					</div>

			}
				</div>
			</div>
		</div>


@code {
	private IEnumerable<EventViewModel> _allEvents = new List<EventViewModel>();

	protected override async Task OnInitializedAsync()
	{
		await GetAllEvents();
	}

	private async Task GetAllEvents()
	{
		_allEvents = await unitOfService.EventService.GetAllAsync();
	}
}


@functions {
	protected async override Task OnAfterRenderAsync(bool firstRender) 
	{ 
		if (firstRender)
		{ 
			await JsRuntime.InvokeAsync<object>("initializeCarousel");
		firstRender = false; 
		} 
	}
  }


@*    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await provider.GetAuthenticationStateAsync();

        var name = authState.User.Identity.Name;

        isAdmin = authState.User.IsInRole("Admin");
    }*@
