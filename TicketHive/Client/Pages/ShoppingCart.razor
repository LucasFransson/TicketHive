@page "/ShoppingCart"
@using TicketHive.Bll.Services.Managers;
@using TicketHive.Client.LocalStorage;
@inject AuthenticationStateProvider _provider;
@inject LocalStorageManager _localStorage
@inject NavigationManager _navigationManager

<h3>ShoppingCart</h3>

@if(cartItems is not null)
{
    foreach(var group in cartItems.GroupBy(e => e.Id))
    {
        <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <h5 class="card-title">@group.First().Name</h5>
                            <p class="card-text">Date: @DateTimeFormatter.FormatDayNumberMonthText(group.First().StartTime) - @DateTimeFormatter.FormatDayNumberMonthText(group.First().EndTime)</p>
                            <p class="card-text">Price: @group.First().Price</p>
                            <div class="input-group mb-3">
                                <div class="input-group-prepend">
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => DecreaseCount(group.First(), group.Count())">-</button>
                                </div>
                            <input type="number" class="form-control" value="@group.Count()" aria-label="Quantity">
                                <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => IncrementCount(group.First(), group.Count())">+</button>
                                </div>
                            </div>
                            <button class="btn btn-danger" @onclick="() => RemoveEvent(group.First())">Remove Item</button>
                        </div>
                    </div>
                </div>
            </div>
    }
}

@if(cartItems?.Count != 0)
{
    <div>
        <button class="btn btn-success btn-lg btn-block" @onclick="RedirectToConfirm">Checkout</button>
    </div>
}
else
{
    <div>
        <button class="btn btn-success btn-lg btn-block" disabled>Cart is empty</button>
    </div>
}



@code {
    private List<CartItemViewModel> cartItems = new();
    private string username;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _provider.GetAuthenticationStateAsync();

        username = authState.User.Identity.Name;

        //isAdmin = authState.User.IsInRole("Admin");
        cartItems = await GetCartItems(username);
    }

    private void RedirectToConfirm()
    {
        _navigationManager.NavigateTo("/confirm");
    }

    private async Task IncrementCount(CartItemViewModel cartItem, int quantity)
    {
        if (quantity > 0)
        {
            quantity++;

            await _localStorage.AddCartItemAsync(cartItem, username);

            cartItems = await GetCartItems(username);
        }
    }

    private async Task DecreaseCount(CartItemViewModel cartItem, int quantity)
    {
        if (quantity > 0)
        {
            quantity--;

            await _localStorage.RemoveCartItemAsync(cartItems, cartItem, username);

            cartItems = await GetCartItems(username);
        }
    }

    private async Task RemoveEvent(CartItemViewModel cartItem)
    {
        await _localStorage.RemoveEventFromCartAsync(cartItem, username);

        cartItems = await GetCartItems(username);
    }

    private async Task<List<CartItemViewModel>?> GetCartItems(string username)
    {
        return await _localStorage.GetCartItems(username);
    }
}
