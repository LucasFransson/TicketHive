@page "/event/{id:int}"
@using TicketHive.Bll.Services.CurrencyApi;
@using TicketHive.Bll.Services.Interfaces;
@using TicketHive.Bll.Services.Managers;
@using TicketHive.Client.LocalStorage;
@inject AuthenticationStateProvider _provider;
@inject LocalStorageManager _localStorage
@inject IUnitOfService _unitOfService

@if(ev is not null)
{
    <div class="container w-50">
        <div class="card">
            <img src="/images/@ev.ImageString" class="card-img-top" alt="...">
            <div class="card-body">
                <h2 class="card-title">@ev.Name</h2>
                <p class="card-text">Date: @DateTimeFormatter.FormatDayNumberMonthText(ev.StartTime) - @DateTimeFormatter.FormatDayNumberMonthText(ev.EndTime)</p>
                <p class="card-text">@ev.Description</p>
                <p class="card-text">@Math.Round(ev.Price*(decimal)exchangeRate) @currency</p>
                <button class="button-buy" @onclick="AddToCart">Add To Cart</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private EventViewModel? ev = new();
    private string username;
    private string currency;
    private double exchangeRate; 

    protected override async Task OnInitializedAsync()
    {
        ev = await _unitOfService.EventService.GetByIdAsync(Id);
        var authState = await _provider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;

        await _localStorage.InitializeUserAsync(username);

        exchangeRate = await _localStorage.GetExchangeRateAsync(username);
        currency = await _localStorage.GetCurrencyForDisplayAsync(username);
    }

    private async Task AddToCart()
    {    
        CartItemViewModel cartItem = new()
        {
            Id = ev.Id,
            Name = ev.Name,
            Price = ev.Price,
            StartTime = ev.StartTime,
            EndTime = ev.EndTime
        };

        await _localStorage.AddCartItemAsync(cartItem, username);
    }
}
