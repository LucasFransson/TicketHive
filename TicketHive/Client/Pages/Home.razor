@using TicketHive.Bll.Services.Interfaces;
@using TicketHive.Bll.Services.Managers;
@using TicketHive.Shared.Extensions;

@inject AuthenticationStateProvider provider;
@inject NavigationManager NavigationManager;
@inject IUnitOfService unitOfService;
@page "/Home"


<div class="container">
    @foreach(var chunk in _allEvents.ChunkBy(4))
    {
        <div class="row">
            @foreach(var e in chunk)
            {
                <div class="@($"col-md-{Math.Max(12 / chunk.Count, 3)}")">
                    <div class="card mr-5">
                        <img src="@e.ImageString"
                             class="card-img-top"
                             alt="Event Image" />
                        <div class="card-body">
                            <h5 class="card-title red-foreground">@e.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@e.EventType.Name</h6>
                            <p class="card-text blue-foreground">@e.Description</p>
                            <p class="card-text blue-foreground">@DateTimeFormatter.FormatDayNumberMonthText(e.StartTime) - @DateTimeFormatter.FormatDayNumberMonthText(e.EndTime)</p>
                            <p class="card-text blue-foreground">@e.CountryName</p>
                   @*         <p class="card-text font-weight-bold">$@e.Price</p>*@
                            <button class="btn btn-buy btn-block" @onclick="(()=>GoToEvent(e.Id))">Buy Tickets</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<SearchbarButton/>

<div>
    <ul class="list-group">
        <li class="list-group-item"><h5>My Events</h5></li>
        <li class="list-group-item">A second item</li>
        <li class="list-group-item">A third item</li>
        <li class="list-group-item">A fourth item</li>
        <li class="list-group-item">And a fifth one</li>
    </ul>
</div>

<br />



@code {
    //private IEnumerable<EventViewModel> _allEvents = new List<EventViewModel>();


    private List<EventViewModel> _allEvents = new List<EventViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await GetAllEvents();
    }

    private async Task GetAllEvents()
    {
        _allEvents = (await unitOfService.EventService.GetAllAsync()).ToList();
    }
    private void GoToEvent(int id)
    {
        NavigationManager.NavigateTo($"/event/{id}");
    }
}