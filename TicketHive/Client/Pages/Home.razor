@using Microsoft.AspNetCore.Authorization;
@using TicketHive.Bll.Services.CurrencyApi;
@using TicketHive.Bll.Services.Interfaces;
@using TicketHive.Bll.Services.Managers;
@using TicketHive.Client.LocalStorage;
@using TicketHive.Shared.Extensions;

@inject AuthenticationStateProvider provider;
@inject LocalStorageManager localStorage;
@inject NavigationManager NavigationManager;
@inject IUnitOfService unitOfService;
@page "/Home"
@attribute [Authorize]


<div class="container">
    @foreach (var chunk in _allEvents.ChunkBy(4))
    {
        <div class="row">
            @foreach (var e in chunk)
            {
                <div class="@($"col-md-{Math.Max(12 / chunk.Count, 3)}")">
                    <div class="card mr-5">
                        <img src="/images/@e.ImageString" class="card-img-top" alt="...">
                        <div class="card-body">
                            <h5 class="card-title red-foreground">@e.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@e.EventType.Name</h6>
                            <p class="card-text blue-foreground">@e.Description</p>
                            <p class="card-text blue-foreground">@DateTimeFormatter.FormatDayNumberMonthText(e.StartTime) - @DateTimeFormatter.FormatDayNumberMonthText(e.EndTime)</p>
                            <p class="card-text blue-foreground">@e.CountryName</p>
                            <button class="btn btn-buy btn-block" @onclick="(()=>GoToEvent(e.Id))">Buy Tickets</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>



<div class="container mt-4">
    <h5 class="mb-3">My Events</h5>
    <ul class="list-group">
        @if (_usersTickets.Any())
        {
            @foreach (var ticket in _usersTickets)
            {
                var eventViewModel = _allEvents.FirstOrDefault(e => e.Id == ticket.EventId);
                if (eventViewModel != null)
                {
                    <li class="list-group-item">
                        <div class="row">
                            <div class="col-sm-4">
                                <img src="/images/@eventViewModel.ImageString" alt="Event image" class="img-fluid rounded">
                            </div>
                            <div class="col-sm-8">
                                <h5 class="card-title">@eventViewModel.Name</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@eventViewModel.EventType.Name</h6>
                                <p class="card-text">@eventViewModel.Description</p>
                                <p class="card-text">@DateTimeFormatter.FormatDayNumberMonthText(ticket.StartTime) - @DateTimeFormatter.FormatDayNumberMonthText(ticket.EndTime)</p>
                                <p class="card-text">@eventViewModel.CountryName</p>
                            </div>
                        </div>
                    </li>
                }
            }
        }
        else
        {
            <li class="list-group-item">You haven't bought any events yet.</li>
        }
    </ul>
</div>




@code {



    private List<SoldTicketViewModel> _usersTickets = new List<SoldTicketViewModel>();
    private List<EventViewModel> _usersEvents = new();
    private List<EventViewModel> _allEvents = new List<EventViewModel>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await provider.GetAuthenticationStateAsync();

        var username = authState.User.Identity.Name;

        if (!string.IsNullOrWhiteSpace(username))
        {
            UserViewModel? model = await unitOfService.UserService.GetByNameAsync(username);

            double userExchangeRate = await CurrencyApiHelper.MakeCallAsync(model.Currency);

            await localStorage.AddExchangeRateAsync(userExchangeRate, username);
            await localStorage.AddCurrencyForDisplayAsync(model.Currency, username);

            await GetAllUserEvents();

        }

        await GetAllEvents();
    }

    private async Task GetAllEvents()
    {
        _allEvents = (await unitOfService.EventService.GetAllAsync()).ToList();
    }

    private async Task GetAllUserEvents()
    {
        var authState = await provider.GetAuthenticationStateAsync();
        var username = authState.User.Identity.Name;
        _usersTickets = (await unitOfService.SoldTicketService.GetAllByNameAsync(username)).ToList();
    }

    private void GoToEvent(int id)
    {
        NavigationManager.NavigateTo($"/event/{id}");
    }
}



